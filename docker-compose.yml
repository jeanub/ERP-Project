name: stack

services:
  db:
    image: postgres:15
    env_file: [.env.dev]
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-appdb}
      POSTGRES_USER: ${POSTGRES_USER:-appuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-apppass}
      POSTGRES_INITDB_ARGS: "--locale-provider=icu --icu-locale=es-AR"
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-appuser} -d ${POSTGRES_DB:-appdb} || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 20
    profiles: ["dev","prod"]

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    profiles: ["dev","prod"]

  backend:
    build: { context: ./backend }
    working_dir: /app
    volumes:
      - ./backend:/app
    env_file: [.env.dev]
    command: >
      sh -lc '
      if [ -x /app/docker/dev/entrypoint.sh ]; then
        /app/docker/dev/entrypoint.sh;
      else
        pip install -r requirements.txt &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000;
      fi'
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    ports: ["8000:8000"]
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8000/api/ping/ >/dev/null || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 10
    profiles: ["dev"]

  celery:
    build: { context: ./backend }
    working_dir: /app
    volumes:
      - ./backend:/app
    env_file: [.env.dev]
    command: ["celery","-A","config","worker","-l","info"]
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    profiles: ["dev"]

  beat:
    build: { context: ./backend }
    working_dir: /app
    volumes:
      - ./backend:/app
    env_file: [.env.dev]
    command: ["celery","-A","config","beat","-l","info"]
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
    profiles: ["dev"]

  frontend:
    image: node:20-alpine
    working_dir: /app
    command: >
      sh -lc 'npm ci || npm install && npm run dev -- --host 0.0.0.0 --port 5173'
    volumes:
      - ./frontend:/app
    environment:
      - CHOKIDAR_USEPOLLING=true
    ports: ["5173:5173"]
    depends_on:
      backend: { condition: service_started }
    profiles: ["dev"]

volumes:
  pgdata:
